(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{106:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),l=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,d=u["".concat(o,".").concat(m)]||u[m]||b[m]||i;return t?r.a.createElement(d,c(c({ref:n},s),{},{components:t})):r.a.createElement(d,c({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},76:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return l}));var a=t(2),r=t(6),i=(t(0),t(106)),o={title:"Overview"},c={unversionedId:"language/overview",id:"language/overview",isDocsHomePage:!1,title:"Overview",description:"Wasp is a declarative language that recognizes web application-specific terms (e.g. page or route) as",source:"@site/docs/language/overview.md",slug:"/language/overview",permalink:"/docs/language/overview",editUrl:"https://github.com/wasp-lang/web/edit/master/docs/language/overview.md",version:"current",sidebar:"docs",previous:{title:"The End",permalink:"/docs/tutorials/todo-app/the-end"},next:{title:"Basic Elements",permalink:"/docs/language/basic-elements"}},p=[],s={rightToc:p};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Wasp is a declarative language that recognizes web application-specific terms (e.g. ",Object(i.b)("em",{parentName:"p"},"page")," or ",Object(i.b)("em",{parentName:"p"},"route"),") as\nwords of the language."),Object(i.b)("p",null,"The basic idea is that the higher-level overview of an app (e.g. pages, routes, database model, ...) is defined in ",Object(i.b)("inlineCode",{parentName:"p"},"*.wasp")," files (for now just one), while the specific parts (web components, back-end queries, ...) are implemented in specific non-wasp technologies (React, NodeJS, Prisma) and then referenced in the ",Object(i.b)("inlineCode",{parentName:"p"},"*.wasp")," files."),Object(i.b)("p",null,"Basic structure of a Wasp project is:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"*.wasp")," file"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ext/")," directory -> Contains non-wasp code (JS, CSS, ...) structured in any way you want.")),Object(i.b)("p",null,"When referencing code from ",Object(i.b)("inlineCode",{parentName:"p"},"ext/")," in your ",Object(i.b)("inlineCode",{parentName:"p"},"*.wasp")," file, you do it as ",Object(i.b)("inlineCode",{parentName:"p"},"@ext/relative/path/of/file/in/ext/dir"),"."),Object(i.b)("h1",{id:"simple-example"},"Simple example"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"TodoApp/\n  - main.wasp\n  - ext/\n    - operations.js\n    - pages/\n      - Main.js\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-css",metastring:'title="main.wasp"',title:'"main.wasp"'}),'app todoApp {\n  title: "ToDo App"\n}\n\nroute "/" -> page Main\npage Main {\n  component: import Main from "@ext/pages/Main"\n}\n\nquery getTasks {\n  fn: import { getTasks } from "@ext/operations.js",\n  entities: [Task]\n}\n\naction createTask {\n  fn: import { createTask } from "@ext/operations.js",\n  entities: [Task]\n}\n\nentity Task {=psl\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean @default(false)\npsl=}\n')),Object(i.b)("p",null,"You can check out a full working example ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/wasp-lang/wasp/tree/master/waspc/examples/todoApp"}),"here"),"."),Object(i.b)("p",null,"In the following sections each of these basic language elements is explained. "))}l.isMDXComponent=!0}}]);